#'AdjacencyListUndirectedGraph' class taken from elsewhere to simulate the Undirected Graph Data Structure 
#to create the Undirected Graph Data Structure to solve the Leetcode's problem code on
class AdjacencyListUndirectedGraph:
    def __init__(self, edges):
        self.edges = edges
        self.graph_dictionary = {}

        for node1, node2 in self.edges:
            if node1 in self.graph_dictionary:
                self.graph_dictionary[node1].append(node2)
            else:
                self.graph_dictionary[node1] = [node2]

            if node2 in self.graph_dictionary:
                self.graph_dictionary[node2].append(node1)
            else:
                self.graph_dictionary[node2] = [node1]

    def add_node(self, node):
        if node in self.graph_dictionary:
            print(node, "is already present in the Graph Data Structure")

        else:
            self.graph_dictionary[node] = []

    def add_edge(self, node1, node2):
        if node1 not in self.graph_dictionary:
            print(node1, "is not present in the Graph Data Structure")
        elif node2 not in self.graph_dictionary:
            print(node2, "is not present in the Graph Data Structure")

        else:
            self.graph_dictionary[node1].append(node2)
            self.graph_dictionary[node2].append(node1)

    def delete_node(self, node):
        if node not in self.graph_dictionary:
            print(node, "is not present in the Graph Data Structure")

        else:
            self.graph_dictionary.pop(node)
            
            for i in self.graph_dictionary:
                value_list = self.graph_dictionary[i]
                if node in value_list:
                    value_list.remove(node)

    def delete_edge(self, node1, node2):
        if node1 not in self.graph_dictionary:
            print(node1, "is not present in the Graph Data Structure")
        elif node2 not in self.graph_dictionary:
            print(node2, "is not present in the Graph Data Structure")

        else:
            if node2 in self.graph_dictionary[node1]:
                self.graph_dictionary[node1].remove(node2)
                self.graph_dictionary[node2].remove(node1)
            else:
                print("No such edge exists that is connecting", node1, "to", node2)

    def breadth_first_search(self, node):
 
        queue_list = []
        visited = []
 
        queue_list.append(node)
 
        while queue_list:
            s = queue_list.pop(0)
            visited.append(s)
            if s in self.graph_dictionary:
                for i in self.graph_dictionary[s]:
                    if i not in visited and i not in queue_list:
                        queue_list.append(i)

        return visited
    
    def depth_first_search(self, node):
 
        stack_list = []
        visited = []
 
        stack_list.insert(0, node)
 
        while stack_list:
            s = stack_list.pop(0)
            visited.append(s)
            if s in self.graph_dictionary:
                for i in self.graph_dictionary[s]:
                    if i not in visited and i not in stack_list:
                        stack_list.insert(0, i)

        return visited
    
    def get_all_possible_paths(self, startnode, endnode, path=[]):

        path = path + [startnode]

        if startnode == endnode:
            return [path]
        
        all_possible_paths = []

        for node in self.graph_dictionary[startnode]:
            if node not in path:
                new_paths = self.get_all_possible_paths(node, endnode, path)
                for p in new_paths:
                    all_possible_paths.append(p)

        return all_possible_paths

    def get_shortest_path(self, startnode, endnode, path=[]):
        
        path = path + [startnode]

        if startnode == endnode:
            return path
        
        shortest_path = None

        for node in self.graph_dictionary[startnode]:
            if node not in path:
                sp = self.get_shortest_path(node, endnode, path)
                if sp:
                    if shortest_path is None or len(sp) < len(shortest_path):
                        shortest_path = sp

        return shortest_path

    def __repr__(self):
        return '{}'.format(self.graph_dictionary)
    

#A function found from online to find all combinations of 2 elements from all the elements of a List
def getCombinations(seq):
    combinations = list()
    for i in range(0,len(seq)):
        for j in range(i+1,len(seq)):
            combinations.append([seq[i],seq[j]])
    return combinations


class Solution:
    def maximalNetworkRank(self, n: int, roads: list[list[int]]) -> int:

        if n == 1:
            return 0


        roads_graph = AdjacencyListUndirectedGraph(roads)

        graph_dictionary_key_list = []

        for key, value in roads_graph.graph_dictionary.items():
            graph_dictionary_key_list.append(key)

        all_possible_combinations_of_two_cities_of_roads_graph = getCombinations(graph_dictionary_key_list)

        dictionary_for_number_of_roads_connecting_to_each_city = {}

        for i in range(n):
            dictionary_for_number_of_roads_connecting_to_each_city.update({i : 0}) 


        for counterkey, countervalue in dictionary_for_number_of_roads_connecting_to_each_city.items():

            for key, value in roads_graph.graph_dictionary.items():

                if counterkey != key:
                    for i in value:
                        if counterkey == i:
                            dictionary_for_number_of_roads_connecting_to_each_city[counterkey] += 1

        print(dictionary_for_number_of_roads_connecting_to_each_city)

        network_rank_list = []

        for pair in all_possible_combinations_of_two_cities_of_roads_graph:

            network_rank = dictionary_for_number_of_roads_connecting_to_each_city[pair[0]] + dictionary_for_number_of_roads_connecting_to_each_city[pair[1]]

            if pair[1] in roads_graph.graph_dictionary[pair[0]]:
                network_rank -= 1

            network_rank_list.append(network_rank)

        print(network_rank_list)

        if network_rank_list == []:
            return 0
        else:
            return max(network_rank_list)


roads_list = [[0,1],[0,3],[1,2],[1,3]]
roads_list2 = 2
roads_list3 = [[67,57],[57,25],[75,57],[70,76],[85,46],[6,72],[80,68],[3,28],[11,47],[44,84],[56,70],[84,42],[66,74],[34,81],[48,12],[16,67],[21,5],[44,78],[0,15],[2,29],[20,31],[79,16],[21,70],[17,19],[60,14],[9,41],[35,72],[21,25],[11,15],[31,4],[35,29],[69,5],[72,32],[20,73],[78,62],[72,8],[73,86],[68,69],[58,32],[55,54],[29,17],[75,30],[25,19],[40,23],[28,20],[54,16],[85,64],[6,23],[45,67],[20,53],[9,23],[18,24],[54,67],[50,51],[29,42],[30,28],[81,86],[84,26],[0,6],[41,49],[77,45],[17,49],[81,74],[68,8],[15,49],[22,65],[62,63],[4,8],[14,86],[24,63],[29,56],[52,61],[20,51],[64,20],[32,76],[43,61],[61,29],[84,80],[16,8],[2,35],[26,53],[64,1],[57,19],[13,57],[76,34],[66,54],[51,76],[35,55],[14,24],[75,58],[35,73],[86,52],[2,33],[15,69],[45,82],[43,1],[68,29],[62,8],[84,70],[67,84],[84,71],[9,10],[56,19],[38,36],[84,12],[86,27],[41,60],[38,9],[41,26],[44,21],[40,62],[56,16],[50,16],[77,5],[15,29],[42,12],[72,82],[85,10],[56,42],[22,12],[18,46],[74,77],[0,34],[81,82],[71,77],[27,41],[86,49],[29,78],[10,42],[10,23],[35,32],[4,48],[58,30],[63,34],[14,7],[3,58],[80,17],[75,19],[68,24],[7,79],[67,76],[83,21],[69,62],[51,10],[39,33],[75,3],[10,72],[19,84],[14,78],[42,52],[78,10],[26,81],[42,17],[13,70],[38,50],[1,35],[39,15],[17,52],[72,2],[4,43],[49,44],[68,39],[81,79],[81,1],[35,81],[34,53],[48,24],[30,35],[23,42],[84,10],[81,78],[43,15],[3,45],[8,21],[49,82],[10,79],[57,44],[80,54],[86,19],[0,79],[11,5],[1,54],[12,24],[29,82],[37,70],[51,1],[13,62],[6,11],[42,9],[21,32],[85,3],[61,36],[34,1],[15,17],[64,52],[37,38],[0,83],[5,37],[10,81],[4,6],[44,68],[24,80],[10,80],[15,23],[26,54],[38,28],[70,67],[35,42],[27,47],[55,80],[2,57],[4,20],[10,36],[45,47],[2,38],[32,55],[54,56],[21,15],[37,28],[55,25],[1,41],[7,80],[32,16],[25,79],[65,19],[32,11],[60,27],[8,54],[50,83],[18,34],[84,5],[44,7],[6,79],[5,74],[46,6],[7,59],[50,9],[80,85],[39,40],[11,37],[36,82],[21,39],[24,6],[80,53],[30,72],[7,38],[38,23],[8,58],[19,76],[55,3],[16,44],[45,0],[26,36],[51,15],[82,8],[68,10],[47,5],[57,77],[17,45],[65,11],[24,75],[83,25],[19,23],[85,66],[14,38],[12,47],[12,40],[61,40],[62,19],[65,58],[23,48],[57,78],[21,75],[48,19],[76,14],[52,5],[79,55],[9,20],[82,69],[49,27],[20,80],[9,61],[8,77],[17,70],[62,84],[12,56],[45,56],[7,74],[19,12],[85,59],[80,5],[34,47],[17,27],[21,81],[14,67],[29,7],[23,32],[77,4],[6,58],[33,30],[27,53],[3,81],[64,30],[66,78],[15,4],[45,25],[48,76],[73,57],[12,86],[13,20],[13,71],[58,61],[18,26],[28,58],[63,3],[49,65],[59,49],[18,52],[2,43],[36,53],[1,47],[24,62],[16,69],[52,69],[32,47],[31,2],[46,49],[51,24],[17,37],[36,72],[2,23],[36,1],[55,60],[25,11],[28,7],[44,69],[43,40],[42,53],[39,58],[69,55],[24,74],[13,10],[4,50],[37,31],[42,43],[48,18],[84,43],[24,31],[29,34],[48,56],[31,72],[2,8],[70,31],[38,57],[42,16],[83,39],[43,36],[61,28],[1,33],[79,69],[54,14],[32,4],[40,29],[55,81],[50,70],[61,67],[73,60],[75,33],[62,73],[82,13],[77,70],[11,44],[69,25],[2,59],[71,62],[2,53],[52,59],[30,31],[47,53],[70,5],[86,59],[75,18],[35,45],[53,70],[0,41],[31,75],[52,34],[76,8],[53,46],[3,62],[80,45],[42,39],[47,42],[39,51],[54,72],[86,74],[53,65],[72,22],[46,66],[60,4],[0,3],[9,34],[67,82],[73,32],[2,6],[16,5],[22,8],[40,46],[56,57],[23,26],[17,53],[46,15],[28,74],[9,51],[4,33],[3,43],[82,60],[32,33],[52,55],[82,85],[1,17],[81,48],[74,40],[50,2],[18,55],[71,19],[8,43],[50,42],[10,64],[7,72],[64,23],[30,71],[51,45],[32,42],[45,33],[83,78],[20,6],[61,55],[13,24],[68,0],[4,40],[67,31],[71,34],[27,8],[29,64],[52,9],[33,20],[12,45],[21,61],[75,20],[82,71],[57,46],[9,58],[57,29],[59,29],[8,52],[64,37],[22,49],[31,35],[82,70],[27,1],[80,2],[20,57],[28,33],[61,31],[67,55],[73,67],[24,49],[8,65],[15,78],[46,30],[80,16],[69,78],[31,19],[83,72],[26,29],[46,73],[43,64],[80,1],[42,33],[6,35],[43,76],[28,59],[51,23],[49,35],[51,75],[73,66],[11,70],[37,55],[13,1],[84,40],[34,82],[31,44],[64,57],[40,64],[71,51],[6,53],[38,58],[43,24],[64,55],[86,76],[42,62],[83,27],[36,64],[0,72],[51,78],[27,70],[44,61],[8,71],[56,74],[48,64],[70,40],[29,63],[80,34],[50,86],[2,71],[18,79],[29,24],[82,28],[67,44],[51,33],[62,67],[75,8],[79,73],[32,84],[1,3],[54,59],[6,3],[40,31],[28,53],[26,71],[80,22],[15,10],[59,41],[29,74],[60,22],[27,14],[10,75],[80,36],[30,52],[20,52],[65,16],[77,59],[37,61],[71,35],[58,41],[76,39],[85,79],[43,28],[46,50],[4,79],[4,73],[36,27],[47,13],[28,14],[35,68],[29,19],[27,38],[6,37],[52,19],[7,50],[35,36],[16,38],[74,62],[76,36],[37,10],[14,74],[62,47],[57,11],[84,73],[63,52],[6,41],[74,68],[69,8],[71,1],[48,2],[79,51],[59,24],[40,81],[23,1],[25,24],[83,22],[35,77],[76,41],[75,60],[43,22],[66,9],[24,34],[86,79],[56,25],[19,40],[36,48],[22,20],[35,15],[85,17],[59,34],[77,30],[8,41],[42,68],[7,16],[38,34],[34,31],[58,17],[9,6],[3,8],[15,12],[86,83],[6,45],[70,25],[73,44],[63,57],[58,72],[4,76],[23,82],[75,48],[29,43],[36,73],[36,25],[61,65],[78,31],[35,4],[85,32],[72,64],[54,81],[23,3],[76,77],[53,30],[79,68],[7,73],[40,65],[33,25],[5,76],[65,46],[37,22],[65,26],[86,37],[42,63],[56,40],[69,84],[81,84],[77,65],[50,13],[41,38],[39,84],[66,1],[24,55],[32,41],[73,64],[17,43],[83,61],[52,14],[29,12],[46,47],[57,3],[83,23],[27,84],[34,21],[17,8],[24,47],[51,63],[59,5],[0,8],[68,9],[58,49],[58,62],[3,70],[73,53],[35,8],[58,63],[48,67],[29,60],[58,23],[20,54],[81,6],[15,44],[53,13],[67,25],[19,80],[50,27],[42,60],[5,63],[67,30],[41,25],[51,21],[75,74],[41,18],[35,82],[42,45],[39,77],[72,44],[33,62],[6,18],[27,67],[65,36],[48,26],[78,5],[3,30],[40,26],[33,43],[5,75],[0,39],[43,37],[70,1],[48,21],[24,44],[6,84],[59,42],[18,66],[38,75],[70,73],[56,69],[75,79],[45,1],[17,69],[26,77],[85,0],[61,74],[77,54],[51,70],[47,15],[78,33],[16,77],[51,4],[62,30],[34,4],[12,2],[16,26],[64,13],[73,55],[30,82],[17,12],[72,16],[26,38],[18,69],[26,14],[6,13],[15,30],[86,26],[40,9],[9,12],[49,26],[2,44],[73,2],[11,43],[12,68],[77,47],[43,39],[69,24],[49,74],[17,16],[0,57],[82,51],[16,60],[64,56],[27,45],[29,84],[29,65],[39,36],[7,31],[64,22],[33,70],[39,50],[18,73],[7,66],[13,4],[48,77],[2,1],[74,30],[44,32],[46,39],[80,66],[1,10],[34,40],[4,81],[17,38],[72,11],[79,60],[44,26],[76,57],[27,5],[65,47],[34,50],[63,45],[86,22],[23,67],[77,67],[29,76],[44,66],[33,57],[80,37],[20,42],[4,47],[41,34],[79,47],[34,46],[9,15],[58,7],[2,47],[32,65],[45,85],[52,13],[86,5],[16,29],[19,33],[5,33],[0,46],[25,30],[0,9],[83,77],[62,17],[22,40],[57,41],[67,49],[64,84],[5,8],[24,58],[18,57],[0,59],[70,47],[45,26],[6,16],[35,26],[28,45],[37,16],[69,67],[49,30],[41,20],[58,15],[23,25],[51,36],[55,47],[85,24],[53,29],[62,26],[71,64],[54,4],[2,77],[43,30],[23,68],[61,16],[63,20],[34,48],[5,13],[5,9],[38,3],[28,46],[12,34],[14,65],[30,84],[50,55],[20,84],[27,69],[15,28],[86,78],[26,28],[23,84],[46,69],[10,30],[13,11],[43,27],[58,20],[48,74],[9,80],[50,66],[31,6],[19,11],[50,85],[42,25],[0,44],[59,62],[44,56],[12,70],[69,1],[3,40],[18,32],[61,20],[57,23],[3,17],[72,19],[81,14],[71,59],[86,7],[43,85],[86,17],[60,52],[35,61],[72,52],[70,10],[17,66],[60,33],[68,2],[41,19],[37,2],[56,38],[57,59],[33,79],[16,45],[21,46],[79,61],[49,53],[10,33],[8,10],[62,79],[83,76],[19,2],[12,8],[3,80],[75,68],[12,41],[7,36],[30,18],[50,73],[66,20],[9,28],[62,83],[67,46],[12,3],[0,51],[80,81],[44,29],[69,6],[74,52],[4,16],[30,17],[65,23],[35,52],[48,20],[81,53],[47,56],[7,5],[22,75],[51,25],[78,85],[12,4],[68,53],[79,21],[28,69],[18,49],[84,46],[45,52],[84,9],[52,49],[45,70],[18,82],[0,54],[56,51],[76,37],[50,15],[2,32],[5,60],[60,26],[75,9],[8,45],[77,6],[26,56],[74,43],[73,17],[23,77],[6,33],[67,37],[31,53],[27,71],[42,77],[71,52],[57,74],[4,63],[7,81],[54,70],[75,12],[81,85],[56,73],[21,26],[10,46],[66,4],[14,70],[30,40],[24,22],[5,46],[59,35],[18,67],[9,37],[44,3],[22,66],[24,17],[78,72],[59,81],[73,28],[73,61],[63,59],[85,76],[9,26],[67,56],[66,55],[28,54],[54,64],[84,52],[16,81],[7,51],[47,85],[58,42],[49,3],[23,46],[84,22],[58,73],[21,67],[44,82],[71,32],[49,48],[74,23],[66,23],[14,20],[1,29],[50,5],[60,8],[1,62],[0,10],[61,48],[4,3],[86,34],[59,30],[22,32],[70,34],[29,33],[72,37],[1,15],[33,21],[81,50],[18,14],[27,31],[57,69],[69,37],[17,57],[10,28],[55,39],[66,42],[75,69],[28,24],[64,26],[8,29],[43,46],[34,55],[52,65],[85,39],[66,65],[10,83],[13,84],[62,38],[26,57],[44,48],[30,11],[7,71],[22,35],[43,9],[55,49],[35,86],[72,86],[1,57],[0,21],[14,46],[0,23],[65,31],[5,43],[15,45],[43,65],[69,32],[28,35],[51,11],[7,69],[78,65],[22,51],[71,12],[78,40],[73,51],[62,81],[84,75],[27,26],[41,15],[11,79],[64,33],[7,64],[18,45],[31,76],[5,71],[64,69],[42,70],[22,56],[79,22],[2,85],[34,61],[58,59],[11,83],[10,41],[5,19],[65,45],[84,63],[53,76],[23,75],[22,1],[17,47],[26,80],[4,1],[81,70],[10,6],[82,63],[19,82],[2,86],[27,16],[17,82],[27,51],[23,60],[69,42],[33,86],[36,81],[52,77],[55,62],[54,36],[69,49],[38,31],[23,78],[31,0],[54,68],[38,13],[79,80],[76,68],[82,50],[11,9],[64,12],[31,58],[20,5],[47,49],[20,69],[21,52],[29,46],[17,21],[28,70],[63,15],[22,78],[46,35],[14,22],[19,22],[38,63],[68,26],[61,33],[17,51],[78,6],[27,66],[68,67],[24,78],[37,0],[85,69],[54,22],[78,70],[39,65],[25,49],[55,40],[41,71],[4,30],[18,44],[27,0],[17,68],[52,73],[41,21],[34,51],[20,19],[60,46],[35,3],[28,62],[17,48],[60,18],[59,32],[65,6],[60,19],[75,56],[25,84],[58,43],[27,23],[48,55],[28,27],[69,30],[76,50],[1,42],[57,79],[16,18],[69,10],[73,19],[55,0],[71,28],[45,36],[11,35],[41,56],[74,25],[75,46],[34,35],[8,34],[24,79],[14,33],[58,76],[50,84],[84,60],[31,22],[73,59],[20,30],[83,84],[48,85],[32,25],[31,55],[82,78],[55,13],[64,27],[18,27],[29,50],[0,84],[49,34],[83,42],[51,3],[31,43],[40,0],[86,38],[84,8],[79,29],[71,66],[59,83],[10,45],[57,27],[4,65],[50,37],[68,33],[74,1],[64,9],[58,55],[72,42],[31,32],[12,79],[66,28],[44,34],[56,0],[32,80],[10,38],[51,38],[54,75],[49,11],[11,34],[68,25],[43,48],[41,80],[15,77],[58,0],[76,15],[81,66],[31,11],[72,63],[25,34],[61,71],[6,83],[77,51],[18,58],[9,81],[86,18],[69,47],[16,86],[43,44],[72,20],[75,77],[21,78],[67,5],[0,22],[7,24],[24,45],[51,40],[43,52],[33,24],[13,68],[42,18],[42,57],[24,73],[47,37],[68,18],[80,12],[32,13],[59,44],[42,26],[68,51],[62,16],[82,86],[80,57],[10,5],[46,4],[56,63],[15,74],[38,64],[0,12],[72,40],[37,35],[8,24],[66,60],[67,6],[40,71],[26,79],[86,68],[76,45],[0,29],[3,39],[65,72],[74,12],[39,13],[48,7],[79,53],[82,12],[65,86],[86,56],[54,34],[78,49],[33,74],[19,26],[26,25],[30,29],[11,40],[39,28],[21,11],[63,64],[10,62],[60,71],[39,47],[12,50],[5,66],[17,35],[11,58],[59,51],[60,31],[22,34],[19,14],[43,32],[45,60],[37,81],[56,79],[12,65],[20,40],[84,17],[47,50],[42,37],[36,21],[57,81],[83,63],[70,32],[9,76],[72,47],[77,11],[19,43],[83,19],[75,67],[40,63],[82,9],[23,44],[86,54],[14,75],[41,28],[51,30],[74,70],[33,56],[44,63],[35,23],[52,36],[4,42],[47,40],[16,9],[86,48],[47,23],[4,39],[85,19],[60,59],[38,52],[85,31],[78,28],[81,11],[11,69],[29,18],[55,20],[8,7],[21,84],[57,86],[11,16],[84,48],[81,45],[35,24],[25,66],[4,45],[77,78],[17,67],[72,13],[9,19],[38,33],[74,36],[3,71],[70,52],[75,39],[18,81],[57,36],[56,7],[58,21],[18,17],[30,61],[74,35],[83,5],[85,75],[60,77],[64,50],[83,82],[29,27],[18,59],[58,27],[34,3],[70,63],[30,24],[86,45],[79,36],[2,84],[26,13],[40,36],[79,43],[71,39],[30,38],[86,62],[21,6],[4,7],[63,30],[63,75],[5,62],[81,46],[68,22],[46,68],[73,38],[57,21],[41,31],[14,17],[1,20],[52,31],[18,39],[54,21],[82,61],[17,60],[20,44],[82,39],[3,47],[66,13],[84,47],[67,85],[2,42],[66,36],[83,1],[12,51],[44,80],[5,39],[39,53],[42,31],[33,66],[59,78],[70,36],[4,55],[58,12],[58,68],[46,63],[5,65],[21,86],[9,47],[14,10],[39,32],[27,82],[1,19],[23,79],[15,32],[77,18],[7,11],[29,38],[61,14],[56,80],[14,35],[46,77],[31,81],[44,85],[53,78],[45,53],[52,54],[32,40],[83,64],[12,60],[10,16],[13,58],[4,62],[0,48],[46,61],[78,13],[64,74],[80,27],[33,23],[76,59],[39,49],[79,32],[4,80],[1,67],[30,13],[1,31],[46,55],[85,51],[66,12],[45,37],[14,68],[23,37],[63,81],[17,56],[79,3],[26,82],[47,29],[35,50],[54,53],[39,6],[66,51],[3,24],[8,42],[35,27],[33,34],[18,43],[67,86],[19,70],[53,33],[0,67],[4,57],[39,38],[58,40],[79,63],[14,13],[55,70],[18,0],[81,30],[42,6],[44,70],[78,1],[17,75],[25,54],[63,27],[66,38],[37,60],[17,44],[35,56],[1,37],[27,55],[5,82],[54,74],[2,26],[52,81],[71,43],[59,23],[39,74],[3,53],[63,48],[32,14],[29,36],[4,69],[60,21],[31,3],[73,9],[74,18],[30,36],[82,77],[23,62],[72,71],[37,68],[4,71],[40,28],[6,68],[82,24],[16,85],[12,43],[23,36],[58,71],[15,54],[63,7],[74,21],[54,18],[27,24],[38,81],[36,75],[8,73],[60,40],[27,56],[31,47],[23,50],[26,55],[16,73],[26,1],[63,67],[79,9],[26,67],[78,64],[70,68],[12,53],[9,60],[84,53],[5,85],[12,7],[46,52],[25,78],[32,57],[27,2],[58,78],[48,32],[74,80],[56,43],[69,76],[30,79],[30,78],[46,24],[43,80],[86,61],[22,55],[58,86],[33,47],[76,78],[15,13],[77,29],[37,62],[39,57],[49,36],[55,74],[37,3],[75,59],[45,78],[40,52],[39,66],[40,41],[39,19],[1,82],[13,36],[68,11],[62,68],[74,85],[32,74],[6,34],[10,7],[61,56],[33,65],[38,54],[63,65],[8,74],[35,13],[26,8],[48,22],[57,43],[49,32],[76,26],[55,44],[8,66],[44,58],[41,39],[77,63],[1,86],[49,54],[4,53],[4,23],[10,60],[25,38],[36,77],[82,79],[38,79],[62,21],[53,32],[30,27],[85,9],[27,33],[4,44],[62,77],[39,70],[69,50],[21,24],[58,51],[58,16],[42,85],[63,80],[2,52],[30,6],[57,24],[52,76],[61,12],[55,57],[63,55],[19,45],[41,11],[17,72],[33,71],[65,82],[5,32],[85,4],[76,12],[37,59],[8,56],[71,22],[12,10],[1,84],[30,5],[15,80],[9,7],[39,48],[64,21],[65,56],[26,52],[18,31],[86,41],[31,86],[62,72],[20,83],[82,53],[26,50],[42,46],[19,28],[45,79],[6,51],[50,3],[76,66],[84,68],[57,15],[10,35],[86,3],[49,62],[35,60],[0,1],[20,78],[70,64],[61,51],[53,21],[27,52],[10,73],[35,9],[58,36],[21,82],[74,60],[61,41],[73,80],[81,65],[44,28],[59,80],[70,15],[69,77],[53,83],[6,8],[67,53],[64,2],[45,75],[51,41],[60,62],[68,19],[69,83],[15,82],[39,23],[57,51],[41,14],[54,69],[34,7],[52,50],[29,22],[27,48],[54,39],[11,27],[3,83],[43,70],[30,26],[14,69],[15,71],[66,58],[65,27],[29,23],[8,13],[38,55],[36,17],[65,50],[65,1],[66,77],[19,55],[70,60],[40,48],[34,62],[75,53],[15,66],[9,54],[43,6],[61,59],[2,13],[4,19],[75,11],[73,54],[83,57],[76,1],[79,78],[76,49],[40,80],[11,18],[28,60],[48,80],[36,0],[12,23],[85,86],[77,43],[56,2],[31,5],[61,47],[72,79],[29,72],[6,73],[2,78],[41,45],[16,49],[33,41],[7,20],[28,64],[39,52],[8,67],[22,70],[22,52],[21,16],[81,22],[80,47],[32,81],[38,85],[14,48],[3,26],[1,77],[21,13],[76,62],[66,47],[11,66],[4,83],[56,5],[66,26],[76,23],[40,16],[76,35],[45,61],[45,2],[71,37],[41,78],[13,37],[52,29],[46,26],[20,65],[63,31],[78,73],[67,2],[73,34],[54,78],[61,19],[60,72],[63,47],[50,43],[35,40],[18,5],[66,2],[63,71],[41,17],[12,13],[31,46],[30,16],[25,9],[77,40],[56,18],[74,63],[78,52],[77,13],[37,15],[15,18],[5,14],[73,43],[58,84],[48,30],[66,35],[65,41],[12,85],[73,26],[62,48],[49,5],[61,26],[64,80],[8,46],[32,6],[51,31],[36,47],[25,85],[56,72],[77,38],[15,2],[50,54],[54,42],[33,63],[22,85],[64,5],[38,6],[5,53],[12,72],[72,3],[69,38],[81,51],[15,48],[59,10],[41,37],[23,61],[56,23],[29,41],[49,42],[6,19],[7,61],[7,18],[32,7],[67,51],[24,16],[54,27],[9,30],[36,84],[77,81],[2,74],[24,77],[65,13]]

solution = Solution()

print(solution.maximalNetworkRank(4, roads_list))
print(solution.maximalNetworkRank(1, roads_list2))
print(solution.maximalNetworkRank(87, roads_list3))